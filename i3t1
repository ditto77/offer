package offer;
import java.util.Scanner;
public class i3t1 {
	//数组中重复的数字，一个数字最多交换两次就能移动到自己的位置上，所以时间复杂度为n，空间复杂度为1
	/*public static boolean main(String[] args) {
		// TODO Auto-generated method stub
		Scanner in = new Scanner(System.in);//接收输入
		String []num = in.nextLine().split("\\s+");
		int a=num.length;
		int[] nums = null;
		for(int i=0;i<a;i++) {
		nums[i]=Integer.parseInt(num[i]);
		}
		if(a<=0) {
			return false;
		}
		for(int i=0;i<a;++i) {
			while(nums[i]!=i) {
				if(nums[i]==nums[nums[i]]) {
					return true;
				}
				else {
					int temp=nums[i];
					nums[i]=nums[temp];
					nums[temp]=temp;
                     }
			}
		}
		return false;
	}

}*/
	public static void main(String[] args) {
		// 不含重复数字
		int[] intList = new int[] {4,3,3,1,5,2,6,7,9,8};
		//数组排序
		Qsort(intList, 0, intList.length-1);
		showList(intList);
		//遍历输出重复数字
		int flag = 0;//如果数字不重复，标签设为0
		for(int i =0;i<intList.length-1;i++) {
			if (intList[i]==intList[i+1]){
				flag = 1;
				System.out.println(intList[i]);
			}
		}
		if(flag==0) {
			System.out.println(-1);
		}
	} 
	
	
	public static void Qsort(int[] L,int left,int right) {
		int loc;
		if(left<right) {
			loc = moveElement(L, left, right);
			// loc位置为正确位置，不用再挪动
			Qsort(L, left, loc-1);
			Qsort(L, loc+1, right);
		}
	}
	
	public static int moveElement(int[] L,int left,int right) {
		int low = left;
		while(left<right) {
			while(L[right]>=L[low] && left<right) {
				right--;
			}
			while(L[left]<=L[low] && left<right) {
				left++;
			}
			if(L[left]>L[low] && L[right]<L[low]) {
				swap(L, left, right);	
			}
		}
		swap(L, low, left);
		return left;
	}
	public static void showList(int[] L) {
		for (int i = 0; i < L.length; i++) {
			System.out.print(String.valueOf(L[i]) + ' ');
		}
		System.out.println();
	}
	
	public static void swap(int[] L,int i,int j) {
			int temp = L[i];
			L[i] = L[j];
			L[j] = temp;
		}
}
