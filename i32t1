package offer;

import java.util.LinkedList;

public class i32t1 {
	//从上往下打印二叉树的节点，同一层的从左往右
	//因为先进容器的要先出来，因此容器是队列
	public void printTree(TreeNode root) {
		if(root==null)
			return;
		LinkedList<TreeNode> queue=new LinkedList<TreeNode>();
		//queue.offer相当于add，但是offer只是抛出false
		//poll，remove都是从队列中删除第一个元素，但是poll在空集合时，不会抛出异常，只是返回null
		queue.offer(root);//先把根节点放入队列中
		TreeNode node=null;
		while(queue.size()!=0) {
			node=queue.poll();//如果队列的第一个元素就是节点，则直接输出
			System.out.print(node.value+" ");
			if(node.left!=null)//按照根左右的顺序进行入队操作
				queue.offer(node.left);
			if(node.right!=null)
				queue.offer(node.right);
		}
	}
	public static class TreeNode{
		int value;
		TreeNode root;
		TreeNode left;
		TreeNode right;
		TreeNode(int value){
			this.value=value;
		}
	}
}
