package offer;

public class i24 {
	//在链表反转中，会出现链表断裂的情况，即m-i-j反转后，i与j之间就断开了
		//因此为了保证不断开，我们用三个指针来实现，分别指向node，前，后
		//还要考虑三种情况（1）头节点指向为空（2）链表只有一个节点
		//（3）链表有多个节点
		//还有一点，反转之后，尾节点变为头节点
		public static void main(String[] args) {
			// TODO Auto-generated method stub
			ListNode node1=new ListNode(1);//这里报错，是定义ListNode时，没有改成static
			ListNode node2=new ListNode(2);
			ListNode node3=new ListNode(3);
			ListNode node4=new ListNode(4);
			ListNode node5=new ListNode(5);
			ListNode node6=new ListNode(6);
			node1.next=node2;
			node2.next=node3;
			node3.next=node4;
			node4.next=node5;
			node5.next=node6;
			ListNode result=ReverseList(node1);
			//System.out.print(result.value);
		}
		private static ListNode ReverseList(ListNode head) {
			// TODO Auto-generated method stub
			if(head==null)
				return null;
			ListNode pNode=head;
			ListNode pPre=null;
			ListNode pNext=pNode.next;
			while(pNext!=null) {
				pNode.next=pPre;
				pNode=pNext;
				pNext=pNode.next;//将链表的顺序倒过来，方向相反
			}
			pNode.next=pPre;
			return pNode;//找到的是最后的头节点
		}
		/* 递归方式实现*/
		public static ListNode ReverseList2(ListNode head) {
			if(head==null||head.next==null)
				return head;//如果只有一个节点或者头节点为空，则直接输出该节点啊
			ListNode reverseHead=ReverseList(head.next);
			//找到最后的头节点，开始转换每个节点的指向
			head.next.next=head;//先把前两个指针转换过来顺序，之后再用递归实现
			head.next=null;//头节点变为尾节点，相当于断开i-j-k之间的j-k的联系
			return reverseHead;
			
		}
		public static class ListNode{
			ListNode node;
			ListNode next;
			int value;
			ListNode(int value){
				this.value=value;
			}
		}

	}


